// Generated by ReScript, PLEASE EDIT WITH CARE

const Js_exn = require("bs-platform/lib/js/js_exn.js");
const Caml_array = require("bs-platform/lib/js/caml_array.js");
const Belt_Option = require("bs-platform/lib/js/belt_Option.js");

const operationTypeRe = /^\s*(query|mutation|subscription|\{)/;

function getOperationTypeFromMatched(matched) {
  const _matched = matched.match(operationTypeRe);
  if (_matched !== null && Caml_array.get(_matched, 0) === "{") {
    return "query";
  }
  return matched;
}

function getOperationType(operation) {
  const result = operation.match(operationTypeRe);
  if (result !== null) {
    return getOperationTypeFromMatched(Caml_array.get(result, 1));
  }
  return Js_exn.raiseError("Invalid operation:\n${operation}");
}

function requestToCompat(operation) {
  if (Belt_Option.isSome(operation.variables)) {
    return {
      query: operation.query,
      variables: operation.variables
    };
  }
  return {
    query: operation.query,
    variables: undefined
  };
}

let Observable;

exports.Observable = Observable;
exports.operationTypeRe = operationTypeRe;
exports.getOperationTypeFromMatched = getOperationTypeFromMatched;
exports.getOperationType = getOperationType;
exports.requestToCompat = requestToCompat;
/* No side effect */
